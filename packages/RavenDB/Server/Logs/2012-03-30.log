time,logger,level,message,exception
2012-03-30 14:57:32.4398,Raven.Database.Impl.DocumentCacher,Info,"MemoryCache Settings:
  PhysicalMemoryLimit = 99
  CacheMemoryLimit    = 3158310912
  PollingInterval     = 00:02:00",
2012-03-30 14:57:32.4818,Raven.Storage.Esent.TransactionalStorage,Info,"Esent Settings:
  MaxVerPages      = 32768
  CacheSizeMax     = 262144
  DatabasePageSize = 4096",
2012-03-30 14:57:33.5408,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Raven%2fDocumentsByEntityName:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Raven_2fDocumentsByEntityName : AbstractViewGenerator
{
	public Index_Raven_2fDocumentsByEntityName()
	{
		this.ViewText = @""from doc in docs 
let Tag = doc[""""@metadata""""][""""Raven-Entity-Name""""]
select new { Tag, LastModified = (DateTime)doc[""""@metadata""""][""""Last-Modified""""] };
"";
		this.AddMapDefinition(docs => from doc in docs
			let Tag = doc[""@metadata""][""Raven-Entity-Name""]
			select new { Tag, LastModified = (DateTime)doc[""@metadata""][""Last-Modified""], __document_id = doc.__document_id });
		this.AddField(""LastModified"");
		this.AddField(""__document_id"");
		this.AddField(""Tag"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Raven_2fDocumentsByEntityName : AbstractViewGenerator
{
	public Index_Raven_2fDocumentsByEntityName()
	{
		this.ViewText = @""from doc in docs 
let Tag = doc[""""@metadata""""][""""Raven-Entity-Name""""]
select new { Tag, LastModified = (DateTime)doc[""""@metadata""""][""""Last-Modified""""] };
"";
		this.AddMapDefinition(docs => from doc in docs
			let Tag = doc[""@metadata""][""Raven-Entity-Name""]
			select new { Tag, LastModified = (DateTime)doc[""@metadata""][""Last-Modified""], __document_id = doc.__document_id });
		this.AddField(""LastModified"");
		this.AddField(""__document_id"");
		this.AddField(""Tag"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 14:57:33.5538,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index Raven/DocumentsByEntityName,
2012-03-30 14:57:33.5808,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Raven/DocumentsByEntityName,
2012-03-30 14:57:33.7088,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Backup/Status' was not found,
2012-03-30 14:57:33.7958,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: ReducingExecuter, will wait for additional work",
2012-03-30 14:57:33.7958,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: IndexingExecuter, will wait for additional work",
2012-03-30 14:57:35.5678,Raven.Database.Server.HttpServer,Debug,Request #   1: GET     -    30 ms - <default>  - 200 - /docs?pageSize=0&noCache=90956662,
2012-03-30 14:57:35.6898,Raven.Database.Server.HttpServer,Debug,Request #   2: GET     -     0 ms - <default>  - 200 - /docs?pageSize=0&noCache=194133971,
2012-03-30 14:57:35.8308,Raven.Database.Server.HttpServer,Debug,Request #   3: GET     -    89 ms - <default>  - 200 - /build/version?noCache=-791753849,
2012-03-30 14:57:35.8308,Raven.Database.Server.HttpServer,Debug,Request #   4: GET     -    89 ms - <default>  - 200 - /license/status?noCache=362200613,
2012-03-30 14:57:35.8308,Raven.Database.Server.HttpServer,Debug,Request #   5: GET     -    60 ms - <default>  - 200 - /databases/?pageSize=1024&noCache=1826179327,
2012-03-30 14:57:35.8308,Raven.Database.Server.HttpServer,Debug,Request #   6: GET     -    57 ms - <default>  - 200 - /docs/?start=0&pageSize=15&noCache=-1783141378,
2012-03-30 14:57:35.8308,Raven.Database.Server.HttpServer,Debug,Request #   7: GET     -    57 ms - <default>  - 200 - /docs/?start=0&pageSize=15&noCache=-398392010,
2012-03-30 14:57:35.8668,Raven.Database.Server.HttpServer,Debug,Request #   8: GET     -    93 ms - <default>  - 200 - /stats?noCache=-53836040,
2012-03-30 14:57:35.9178,Raven.Database.Server.HttpServer,Debug,Request #   9: GET     -     0 ms - <default>  - 200 - /docs?pageSize=0&noCache=604892187,
2012-03-30 14:57:35.9848,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Databases/MyBlog' was found,
2012-03-30 14:57:36.0068,Raven.Database.Util.PortUtil,Info,"Default port 8080 was not available, so using available port 8081",
2012-03-30 14:57:36.0268,Raven.Database.Impl.DocumentCacher,Info,"MemoryCache Settings:
  PhysicalMemoryLimit = 99
  CacheMemoryLimit    = 3158310912
  PollingInterval     = 00:02:00",
2012-03-30 14:57:36.0268,Raven.Storage.Esent.TransactionalStorage,Info,"Esent Settings:
  MaxVerPages      = 32768
  CacheSizeMax     = 262144
  DatabasePageSize = 4096",
2012-03-30 14:57:36.3648,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index AlbumsByCountSold:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByCountSold : AbstractViewGenerator
{
	public Index_AlbumsByCountSold()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.CountSold };
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.CountSold, __document_id = album.__document_id });
		this.AddField(""__document_id"");
		this.AddField(""CountSold"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""CountSold"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""CountSold"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByCountSold : AbstractViewGenerator
{
	public Index_AlbumsByCountSold()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.CountSold };
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.CountSold, __document_id = album.__document_id });
		this.AddField(""__document_id"");
		this.AddField(""CountSold"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""CountSold"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""CountSold"");
	}
}
",
2012-03-30 14:57:36.4528,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index AlbumsByGenre:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByGenre : AbstractViewGenerator
{
	public Index_AlbumsByGenre()
	{
		this.ViewText = @""from album in docs.Albums
where album.Genre != null
select new { Genre = album.Genre.Id }
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			where album.Genre != null
			select new { Genre = album.Genre.Id, __document_id = album.__document_id });
		this.AddField(""Genre"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""Genre.Id"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""Genre.Id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByGenre : AbstractViewGenerator
{
	public Index_AlbumsByGenre()
	{
		this.ViewText = @""from album in docs.Albums
where album.Genre != null
select new { Genre = album.Genre.Id }
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			where album.Genre != null
			select new { Genre = album.Genre.Id, __document_id = album.__document_id });
		this.AddField(""Genre"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""Genre.Id"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""Genre.Id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 14:57:36.5398,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Artists:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Artists : AbstractViewGenerator
{
	public Index_Artists()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.Artist.Id, album.Artist.Name }
from artist in results
group artist by new { artist.Id, artist.Name } into g
select new { g.Key.Id, g.Key.Name }

"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.Artist.Id, album.Artist.Name, __document_id = album.__document_id });
		this.ReduceDefinition = results => from artist in results
			group artist by new { artist.Id, artist.Name } into g
			select new { g.Key.Id, g.Key.Name };
		this.GroupByExtraction = artist => new { artist.Id, artist.Name };
		this.AddField(""Id"");
		this.AddField(""Name"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Artist.Id"");
		this.AddQueryParameterForMap(""Artist.Name"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Artist.Id"");
		this.AddQueryParameterForReduce(""Artist.Name"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Artists : AbstractViewGenerator
{
	public Index_Artists()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.Artist.Id, album.Artist.Name }
from artist in results
group artist by new { artist.Id, artist.Name } into g
select new { g.Key.Id, g.Key.Name }

"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.Artist.Id, album.Artist.Name, __document_id = album.__document_id });
		this.ReduceDefinition = results => from artist in results
			group artist by new { artist.Id, artist.Name } into g
			select new { g.Key.Id, g.Key.Name };
		this.GroupByExtraction = artist => new { artist.Id, artist.Name };
		this.AddField(""Id"");
		this.AddField(""Name"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Artist.Id"");
		this.AddQueryParameterForMap(""Artist.Name"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Artist.Id"");
		this.AddQueryParameterForReduce(""Artist.Name"");
	}
}
",
2012-03-30 14:57:36.6168,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Raven%2fDocumentsByEntityName:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Raven_2fDocumentsByEntityName : AbstractViewGenerator
{
	public Index_Raven_2fDocumentsByEntityName()
	{
		this.ViewText = @""from doc in docs 
let Tag = doc[""""@metadata""""][""""Raven-Entity-Name""""]
select new { Tag, LastModified = (DateTime)doc[""""@metadata""""][""""Last-Modified""""] };
"";
		this.AddMapDefinition(docs => from doc in docs
			let Tag = doc[""@metadata""][""Raven-Entity-Name""]
			select new { Tag, LastModified = (DateTime)doc[""@metadata""][""Last-Modified""], __document_id = doc.__document_id });
		this.AddField(""LastModified"");
		this.AddField(""__document_id"");
		this.AddField(""Tag"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Raven_2fDocumentsByEntityName : AbstractViewGenerator
{
	public Index_Raven_2fDocumentsByEntityName()
	{
		this.ViewText = @""from doc in docs 
let Tag = doc[""""@metadata""""][""""Raven-Entity-Name""""]
select new { Tag, LastModified = (DateTime)doc[""""@metadata""""][""""Last-Modified""""] };
"";
		this.AddMapDefinition(docs => from doc in docs
			let Tag = doc[""@metadata""][""Raven-Entity-Name""]
			select new { Tag, LastModified = (DateTime)doc[""@metadata""][""Last-Modified""], __document_id = doc.__document_id });
		this.AddField(""LastModified"");
		this.AddField(""__document_id"");
		this.AddField(""Tag"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 14:57:36.7198,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index SoldAlbums:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_SoldAlbums : AbstractViewGenerator
{
	public Index_SoldAlbums()
	{
		this.ViewText = @""from order in docs.Orders
from line in order.Lines
select new{ line.Album, line.Quantity }

from result in results
group result by result.Album into g
select new{ Album = g.Key, Quantity = g.Sum(x=>x.Quantity) }


"";
		this.ForEntityNames.Add(""Orders"");
		this.AddMapDefinition(docs => from order in docs
			where order[""@metadata""][""Raven-Entity-Name""] == ""Orders""
			from line in order.Lines
			select new { line.Album, line.Quantity, __document_id = order.__document_id });
		this.ReduceDefinition = results => from result in results
			group result by result.Album into g
			select new { Album = g.Key, Quantity = g.Sum((Func<dynamic, decimal>)(x => (decimal)(x.Quantity))) };
		this.GroupByExtraction = result => result.Album;
		this.AddField(""Album"");
		this.AddField(""Quantity"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Lines,Album"");
		this.AddQueryParameterForMap(""Lines,Quantity"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Lines,Album"");
		this.AddQueryParameterForReduce(""Lines,Quantity"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_SoldAlbums : AbstractViewGenerator
{
	public Index_SoldAlbums()
	{
		this.ViewText = @""from order in docs.Orders
from line in order.Lines
select new{ line.Album, line.Quantity }

from result in results
group result by result.Album into g
select new{ Album = g.Key, Quantity = g.Sum(x=>x.Quantity) }


"";
		this.ForEntityNames.Add(""Orders"");
		this.AddMapDefinition(docs => from order in docs
			where order[""@metadata""][""Raven-Entity-Name""] == ""Orders""
			from line in order.Lines
			select new { line.Album, line.Quantity, __document_id = order.__document_id });
		this.ReduceDefinition = results => from result in results
			group result by result.Album into g
			select new { Album = g.Key, Quantity = g.Sum((Func<dynamic, decimal>)(x => (decimal)(x.Quantity))) };
		this.GroupByExtraction = result => result.Album;
		this.AddField(""Album"");
		this.AddField(""Quantity"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Lines,Album"");
		this.AddQueryParameterForMap(""Lines,Quantity"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Lines,Album"");
		this.AddQueryParameterForReduce(""Lines,Quantity"");
	}
}
",
2012-03-30 14:57:36.7958,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Temp%2fComment%2fByArticleUri:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Temp_2fComment_2fByArticleUri : AbstractViewGenerator
{
	public Index_Temp_2fComment_2fByArticleUri()
	{
		this.ViewText = @""from doc in docs.Comment
select new { ArticleUri = doc.ArticleUri }
"";
		this.ForEntityNames.Add(""Comment"");
		this.AddMapDefinition(docs => from doc in docs
			where doc[""@metadata""][""Raven-Entity-Name""] == ""Comment""
			select new { ArticleUri = doc.ArticleUri, __document_id = doc.__document_id });
		this.AddField(""ArticleUri"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""ArticleUri"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""ArticleUri"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Temp_2fComment_2fByArticleUri : AbstractViewGenerator
{
	public Index_Temp_2fComment_2fByArticleUri()
	{
		this.ViewText = @""from doc in docs.Comment
select new { ArticleUri = doc.ArticleUri }
"";
		this.ForEntityNames.Add(""Comment"");
		this.AddMapDefinition(docs => from doc in docs
			where doc[""@metadata""][""Raven-Entity-Name""] == ""Comment""
			select new { ArticleUri = doc.ArticleUri, __document_id = doc.__document_id });
		this.AddField(""ArticleUri"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""ArticleUri"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""ArticleUri"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 14:57:36.8798,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Temp%2fComment%2fByArticleUriAndPublishedDateSortByPublishedDate:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate : AbstractViewGenerator
{
	public Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate()
	{
		this.ViewText = @""from doc in docs.Comment
select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri }
"";
		this.ForEntityNames.Add(""Comment"");
		this.AddMapDefinition(docs => from doc in docs
			where doc[""@metadata""][""Raven-Entity-Name""] == ""Comment""
			select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri, __document_id = doc.__document_id });
		this.AddField(""PublishedDate"");
		this.AddField(""ArticleUri"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""PublishedDate"");
		this.AddQueryParameterForMap(""ArticleUri"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""PublishedDate"");
		this.AddQueryParameterForReduce(""ArticleUri"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate : AbstractViewGenerator
{
	public Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate()
	{
		this.ViewText = @""from doc in docs.Comment
select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri }
"";
		this.ForEntityNames.Add(""Comment"");
		this.AddMapDefinition(docs => from doc in docs
			where doc[""@metadata""][""Raven-Entity-Name""] == ""Comment""
			select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri, __document_id = doc.__document_id });
		this.AddField(""PublishedDate"");
		this.AddField(""ArticleUri"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""PublishedDate"");
		this.AddQueryParameterForMap(""ArticleUri"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""PublishedDate"");
		this.AddQueryParameterForReduce(""ArticleUri"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 14:57:36.8798,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index AlbumsByCountSold,
2012-03-30 14:57:36.8798,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for AlbumsByCountSold,
2012-03-30 14:57:36.8798,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index AlbumsByGenre,
2012-03-30 14:57:36.8798,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for AlbumsByGenre,
2012-03-30 14:57:36.8798,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index Artists,
2012-03-30 14:57:36.8798,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Artists,
2012-03-30 14:57:36.8798,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index Raven/DocumentsByEntityName,
2012-03-30 14:57:36.8848,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Raven/DocumentsByEntityName,
2012-03-30 14:57:36.8848,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index SoldAlbums,
2012-03-30 14:57:36.8848,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for SoldAlbums,
2012-03-30 14:57:36.8848,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index Temp/Comment/ByArticleUri,
2012-03-30 14:57:37.0278,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Temp/Comment/ByArticleUri,
2012-03-30 14:57:37.0278,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 14:57:37.0278,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 14:57:37.0278,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Backup/Status' was not found,
2012-03-30 14:57:37.0278,Raven.Database.Indexing.IndexStorage,Info,Deleting index Temp/Comment/ByArticleUri,
2012-03-30 14:57:37.0558,Raven.Database.Indexing.WorkContext,Debug,Incremented work counter to 1 because: DELETE INDEX Temp/Comment/ByArticleUri,
2012-03-30 14:57:37.0558,Raven.Database.Indexing.IndexStorage,Info,Deleting index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 14:57:37.0558,Raven.Database.Indexing.WorkContext,Debug,Incremented work counter to 2 because: DELETE INDEX Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 14:57:37.0558,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 2, for: IndexingExecuter, will wait for additional work",
2012-03-30 14:57:37.0558,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 2, for: ReducingExecuter, will wait for additional work",
2012-03-30 14:57:37.0558,Raven.Database.Server.HttpServer,Debug,"Request #  10: GET     - 1,082 ms - MyBlog     - 200 - /docs?pageSize=0&noCache=511681379",
2012-03-30 15:04:31.1884,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Replication/Destinations' was not found,
2012-03-30 15:04:31.1884,Raven.Database.Server.HttpServer,Debug,Request #  11: GET     -     5 ms - <default>  - 404 - /docs/Raven/Replication/Destinations,
2012-03-30 15:04:31.2264,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Replication/Destinations' was not found,
2012-03-30 15:04:31.2264,Raven.Database.Server.HttpServer,Debug,Request #  12: GET     -     5 ms - MyBlog     - 404 - /docs/Raven/Replication/Destinations,
2012-03-30 15:04:31.2844,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Databases/MyBlog' was found,
2012-03-30 15:04:31.2844,Raven.Database.Server.HttpServer,Debug,Request #  13: GET     -     6 ms - <default>  - 200 - /docs/Raven/Databases/MyBlog,
2012-03-30 15:04:33.1136,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/temp.ico' was not found,
2012-03-30 15:04:33.1136,Raven.Database.Server.HttpServer,Debug,Request #  14: GET     -     1 ms - MyBlog     - 404 - /docs/article/temp.ico,
2012-03-30 15:04:33.8076,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Raven/DocumentsByEntityName for: Tag:Article,
2012-03-30 15:04:33.9917,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/my-first-article' was found,
2012-03-30 15:04:33.9947,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/another-one-of-my-articles' was found,
2012-03-30 15:04:34.0127,Raven.Database.Server.HttpServer,Debug,Request #  15: GET     -   286 ms - MyBlog     - 200 - /indexes/dynamic/Article?query=&start=0&pageSize=10&aggregation=None,
2012-03-30 15:12:57.1160,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Replication/Destinations' was not found,
2012-03-30 15:12:57.1160,Raven.Database.Server.HttpServer,Debug,Request #  16: GET     -     1 ms - <default>  - 404 - /docs/Raven/Replication/Destinations,
2012-03-30 15:12:57.1220,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Replication/Destinations' was not found,
2012-03-30 15:12:57.1220,Raven.Database.Server.HttpServer,Debug,Request #  17: GET     -     1 ms - MyBlog     - 404 - /docs/Raven/Replication/Destinations,
2012-03-30 15:12:57.1220,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/temp.ico' was not found,
2012-03-30 15:12:57.1220,Raven.Database.Server.HttpServer,Debug,Request #  18: GET     -     0 ms - MyBlog     - 404 - /docs/article/temp.ico,
2012-03-30 15:12:57.7070,Raven.Database.Server.HttpServer,Debug,Request #  19: GET     -     5 ms - MyBlog     - 304 - /indexes/dynamic/Article?query=&start=0&pageSize=10&aggregation=None,
2012-03-30 15:13:03.3306,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/my-first-article' was found,
2012-03-30 15:13:03.3306,Raven.Database.Server.HttpServer,Debug,Request #  20: GET     -    10 ms - MyBlog     - 200 - /docs/article/my-first-article,
2012-03-30 15:13:04.6557,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/temp.ico' was not found,
2012-03-30 15:13:04.6557,Raven.Database.Server.HttpServer,Debug,Request #  21: GET     -     0 ms - MyBlog     - 404 - /docs/article/temp.ico,
2012-03-30 15:13:05.4978,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Temp%2fComment%2fByArticleUriAndPublishedDateSortByPublishedDate:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate : AbstractViewGenerator
{
	public Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate()
	{
		this.ViewText = @""from doc in docs.Comment
select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri }
"";
		this.ForEntityNames.Add(""Comment"");
		this.AddMapDefinition(docs => from doc in docs
			where doc[""@metadata""][""Raven-Entity-Name""] == ""Comment""
			select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri, __document_id = doc.__document_id });
		this.AddField(""PublishedDate"");
		this.AddField(""ArticleUri"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""PublishedDate"");
		this.AddQueryParameterForMap(""ArticleUri"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""PublishedDate"");
		this.AddQueryParameterForReduce(""ArticleUri"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate : AbstractViewGenerator
{
	public Index_Temp_2fComment_2fByArticleUriAndPublishedDateSortByPublishedDate()
	{
		this.ViewText = @""from doc in docs.Comment
select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri }
"";
		this.ForEntityNames.Add(""Comment"");
		this.AddMapDefinition(docs => from doc in docs
			where doc[""@metadata""][""Raven-Entity-Name""] == ""Comment""
			select new { PublishedDate = doc.PublishedDate, ArticleUri = doc.ArticleUri, __document_id = doc.__document_id });
		this.AddField(""PublishedDate"");
		this.AddField(""ArticleUri"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""PublishedDate"");
		this.AddQueryParameterForMap(""ArticleUri"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""PublishedDate"");
		this.AddQueryParameterForReduce(""ArticleUri"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 15:13:05.5138,Raven.Database.Indexing.IndexStorage,Info,Creating index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate with encoded name Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 15:13:05.5138,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 15:13:05.5358,Raven.Database.Indexing.WorkContext,Debug,Incremented work counter to 3 because: PUT INDEX Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 15:13:05.5358,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 3, for: ReducingExecuter, will wait for additional work",
2012-03-30 15:13:05.5358,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate for: ArticleUri:[[article/my\-first\-article]],
2012-03-30 15:13:05.5468,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,Found a total of 4 documents that requires indexing since etag: 00000000-0000-0000-0000-000000000000,
2012-03-30 15:13:05.5928,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"After read triggers executed, 4 documents remained",
2012-03-30 15:13:05.6048,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"Going to index 2 documents in IndexName: Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate, LastIndexedEtag: 00000000-0000-0000-0000-000000000000",
2012-03-30 15:13:05.6048,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"Indexing 2 documents for index: Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate. (comment/1,comment/2)",
2012-03-30 15:13:05.6568,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate for: ArticleUri:[[article/my\-first\-article]],
2012-03-30 15:13:05.7568,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate for: ArticleUri:[[article/my\-first\-article]],
2012-03-30 15:13:05.7828,Raven.Database.Indexing.Index.Indexing,Debug,"Indexing on comment/1 result in index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate gave document: 	__document_id IS: comment/1
	PublishedDate I-: 20110210230000000
	ArticleUri I-: article/my-first-article
",
2012-03-30 15:13:05.8568,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate for: ArticleUri:[[article/my\-first\-article]],
2012-03-30 15:13:05.8568,Raven.Database.Indexing.Index.Indexing,Debug,"Indexing on comment/2 result in index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate gave document: 	__document_id IS: comment/2
	PublishedDate I-: 20070423235820000
	ArticleUri I-: article/my-first-article
",
2012-03-30 15:13:05.9569,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate for: ArticleUri:[[article/my\-first\-article]],
2012-03-30 15:13:05.9929,Raven.Database.Indexing.Index.Indexing,Debug,Indexed 2 documents for Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 15:13:05.9989,Raven.Database.Indexing.WorkContext,Debug,Incremented work counter to 4 because: WORK BY IndexingExecuter,
2012-03-30 15:13:05.9989,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 4, for: ReducingExecuter, will wait for additional work",
2012-03-30 15:13:05.9989,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 4, for: IndexingExecuter, will wait for additional work",
2012-03-30 15:13:06.0569,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate for: ArticleUri:[[article/my\-first\-article]],
2012-03-30 15:13:06.0909,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'comment/1' was found,
2012-03-30 15:13:06.0909,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'comment/2' was found,
2012-03-30 15:13:06.0909,Raven.Database.Server.HttpServer,Debug,Request #  22: GET     -   730 ms - MyBlog     - 200 - /indexes/dynamic/Comment?query=ArticleUri%253A%255B%255Barticle%252Fmy%255C-first%255C-article%255D%255D&start=0&pageSize=128&aggregation=None&sort=-PublishedDate,
2012-03-30 15:13:31.1414,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/temp.ico' was not found,
2012-03-30 15:13:31.1414,Raven.Database.Server.HttpServer,Debug,Request #  23: GET     -     1 ms - MyBlog     - 404 - /docs/article/temp.ico,
2012-03-30 15:13:31.2054,Raven.Database.Server.HttpServer,Debug,Request #  24: GET     -     0 ms - MyBlog     - 304 - /indexes/dynamic/Article?query=&start=0&pageSize=10&aggregation=None,
2012-03-30 15:13:32.2235,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/my-first-article' was found,
2012-03-30 15:13:32.2235,Raven.Database.Server.HttpServer,Debug,Request #  25: GET     -    13 ms - MyBlog     - 304 - /docs/article/my-first-article,
2012-03-30 15:13:33.5866,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/temp.ico' was not found,
2012-03-30 15:13:33.5866,Raven.Database.Server.HttpServer,Debug,Request #  26: GET     -     0 ms - MyBlog     - 404 - /docs/article/temp.ico,
2012-03-30 15:13:33.9707,Raven.Database.Server.HttpServer,Debug,Request #  27: GET     -     4 ms - MyBlog     - 304 - /indexes/dynamic/Comment?query=ArticleUri%253A%255B%255Barticle%252Fmy%255C-first%255C-article%255D%255D&start=0&pageSize=128&aggregation=None&sort=-PublishedDate,
2012-03-30 15:28:34.3367,Raven.Database.Indexing.WorkContext,Debug,Stopping background workers,
2012-03-30 15:37:33.8756,Raven.Database.Indexing.IndexStorage,Info,Deleting index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 15:37:33.8756,Raven.Database.Indexing.DefaultBackgroundTaskExecuter,Error,Could not execute repeated task,"System.NullReferenceException: Object reference not set to an instance of an object.
   at Raven.Database.Indexing.IndexSearcherHolder.IndexSearcherHoldingState.DisposeRudely() in c:\Builds\RavenDB-Stable\Raven.Database\Indexing\IndexSearcherHolder.cs:line 73
   at Raven.Database.Indexing.IndexSearcherHolder.IndexSearcherHoldingState.Dispose() in c:\Builds\RavenDB-Stable\Raven.Database\Indexing\IndexSearcherHolder.cs:line 68
   at Raven.Database.Indexing.IndexSearcherHolder.SetIndexSearcher(IndexSearcher searcher) in c:\Builds\RavenDB-Stable\Raven.Database\Indexing\IndexSearcherHolder.cs:line 25
   at Raven.Database.Indexing.Index.Dispose() in c:\Builds\RavenDB-Stable\Raven.Database\Indexing\Index.cs:line 94
   at Raven.Database.Indexing.IndexStorage.DeleteIndex(String name) in c:\Builds\RavenDB-Stable\Raven.Database\Indexing\IndexStorage.cs:line 239
   at Raven.Database.DocumentDatabase.DeleteIndex(String name) in c:\Builds\RavenDB-Stable\Raven.Database\DocumentDatabase.cs:line 829
   at Raven.Database.Queries.DynamicQueryRunner.CleanupCache() in c:\Builds\RavenDB-Stable\Raven.Database\Queries\DynamicQueryRunner.cs:line 130
   at Raven.Database.Plugins.Builtins.CleanupOldDynamicIndexes.Execute() in c:\Builds\RavenDB-Stable\Raven.Database\Plugins\Builtins\CleanupOldDynamicIndexes.cs:line 43
   at Raven.Database.Indexing.DefaultBackgroundTaskExecuter.ExecuteTimer(Object state) in c:\Builds\RavenDB-Stable\Raven.Database\Indexing\DefaultBackgroundTaskExecuter.cs:line 61"
2012-03-30 15:57:33.9497,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: IndexingExecuter, will wait for additional work",
2012-03-30 15:57:33.9497,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: ReducingExecuter, will wait for additional work",
2012-03-30 16:47:52.0846,Raven.Database.Server.HttpServer,Debug,Request #  28: GET     -     1 ms - <default>  - 400 - /debug?port=5858,
2012-03-30 16:57:34.0678,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: ReducingExecuter, will wait for additional work",
2012-03-30 16:57:34.0678,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: IndexingExecuter, will wait for additional work",
2012-03-30 17:21:26.8651,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Replication/Destinations' was not found,
2012-03-30 17:21:26.8651,Raven.Database.Server.HttpServer,Debug,Request #  29: GET     -     1 ms - <default>  - 404 - /docs/Raven/Replication/Destinations,
2012-03-30 17:21:26.8651,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Databases/MyBlog' was found,
2012-03-30 17:21:26.8651,Raven.Database.Util.PortUtil,Info,"Default port 8080 was not available, so using available port 8081",
2012-03-30 17:21:26.8891,Raven.Database.Impl.DocumentCacher,Info,"MemoryCache Settings:
  PhysicalMemoryLimit = 99
  CacheMemoryLimit    = 3158310912
  PollingInterval     = 00:02:00",
2012-03-30 17:21:26.8891,Raven.Storage.Esent.TransactionalStorage,Info,"Esent Settings:
  MaxVerPages      = 32768
  CacheSizeMax     = 262144
  DatabasePageSize = 4096",
2012-03-30 17:21:26.9561,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Databases/MyBlog' was found,
2012-03-30 17:21:26.9571,Raven.Database.Server.HttpServer,Debug,Request #  30: GET     -     3 ms - <default>  - 200 - /docs/Raven/Databases/MyBlog,
2012-03-30 17:21:27.2171,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index AlbumsByCountSold:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByCountSold : AbstractViewGenerator
{
	public Index_AlbumsByCountSold()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.CountSold };
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.CountSold, __document_id = album.__document_id });
		this.AddField(""__document_id"");
		this.AddField(""CountSold"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""CountSold"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""CountSold"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByCountSold : AbstractViewGenerator
{
	public Index_AlbumsByCountSold()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.CountSold };
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.CountSold, __document_id = album.__document_id });
		this.AddField(""__document_id"");
		this.AddField(""CountSold"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""CountSold"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""CountSold"");
	}
}
",
2012-03-30 17:21:27.2961,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index AlbumsByGenre:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByGenre : AbstractViewGenerator
{
	public Index_AlbumsByGenre()
	{
		this.ViewText = @""from album in docs.Albums
where album.Genre != null
select new { Genre = album.Genre.Id }
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			where album.Genre != null
			select new { Genre = album.Genre.Id, __document_id = album.__document_id });
		this.AddField(""Genre"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""Genre.Id"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""Genre.Id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_AlbumsByGenre : AbstractViewGenerator
{
	public Index_AlbumsByGenre()
	{
		this.ViewText = @""from album in docs.Albums
where album.Genre != null
select new { Genre = album.Genre.Id }
"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			where album.Genre != null
			select new { Genre = album.Genre.Id, __document_id = album.__document_id });
		this.AddField(""Genre"");
		this.AddField(""__document_id"");
		this.AddQueryParameterForMap(""Genre.Id"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""Genre.Id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 17:21:27.3781,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Artists:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Artists : AbstractViewGenerator
{
	public Index_Artists()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.Artist.Id, album.Artist.Name }
from artist in results
group artist by new { artist.Id, artist.Name } into g
select new { g.Key.Id, g.Key.Name }

"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.Artist.Id, album.Artist.Name, __document_id = album.__document_id });
		this.ReduceDefinition = results => from artist in results
			group artist by new { artist.Id, artist.Name } into g
			select new { g.Key.Id, g.Key.Name };
		this.GroupByExtraction = artist => new { artist.Id, artist.Name };
		this.AddField(""Id"");
		this.AddField(""Name"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Artist.Id"");
		this.AddQueryParameterForMap(""Artist.Name"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Artist.Id"");
		this.AddQueryParameterForReduce(""Artist.Name"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Artists : AbstractViewGenerator
{
	public Index_Artists()
	{
		this.ViewText = @""from album in docs.Albums
select new { album.Artist.Id, album.Artist.Name }
from artist in results
group artist by new { artist.Id, artist.Name } into g
select new { g.Key.Id, g.Key.Name }

"";
		this.ForEntityNames.Add(""Albums"");
		this.AddMapDefinition(docs => from album in docs
			where album[""@metadata""][""Raven-Entity-Name""] == ""Albums""
			select new { album.Artist.Id, album.Artist.Name, __document_id = album.__document_id });
		this.ReduceDefinition = results => from artist in results
			group artist by new { artist.Id, artist.Name } into g
			select new { g.Key.Id, g.Key.Name };
		this.GroupByExtraction = artist => new { artist.Id, artist.Name };
		this.AddField(""Id"");
		this.AddField(""Name"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Artist.Id"");
		this.AddQueryParameterForMap(""Artist.Name"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Artist.Id"");
		this.AddQueryParameterForReduce(""Artist.Name"");
	}
}
",
2012-03-30 17:21:27.4621,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index Raven%2fDocumentsByEntityName:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Raven_2fDocumentsByEntityName : AbstractViewGenerator
{
	public Index_Raven_2fDocumentsByEntityName()
	{
		this.ViewText = @""from doc in docs 
let Tag = doc[""""@metadata""""][""""Raven-Entity-Name""""]
select new { Tag, LastModified = (DateTime)doc[""""@metadata""""][""""Last-Modified""""] };
"";
		this.AddMapDefinition(docs => from doc in docs
			let Tag = doc[""@metadata""][""Raven-Entity-Name""]
			select new { Tag, LastModified = (DateTime)doc[""@metadata""][""Last-Modified""], __document_id = doc.__document_id });
		this.AddField(""LastModified"");
		this.AddField(""__document_id"");
		this.AddField(""Tag"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_Raven_2fDocumentsByEntityName : AbstractViewGenerator
{
	public Index_Raven_2fDocumentsByEntityName()
	{
		this.ViewText = @""from doc in docs 
let Tag = doc[""""@metadata""""][""""Raven-Entity-Name""""]
select new { Tag, LastModified = (DateTime)doc[""""@metadata""""][""""Last-Modified""""] };
"";
		this.AddMapDefinition(docs => from doc in docs
			let Tag = doc[""@metadata""][""Raven-Entity-Name""]
			select new { Tag, LastModified = (DateTime)doc[""@metadata""][""Last-Modified""], __document_id = doc.__document_id });
		this.AddField(""LastModified"");
		this.AddField(""__document_id"");
		this.AddField(""Tag"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForReduce(""__document_id"");
	}
}
",
2012-03-30 17:21:27.5431,Raven.Database.Storage.IndexDefinitionStorage,Info,"New index SoldAlbums:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_SoldAlbums : AbstractViewGenerator
{
	public Index_SoldAlbums()
	{
		this.ViewText = @""from order in docs.Orders
from line in order.Lines
select new{ line.Album, line.Quantity }

from result in results
group result by result.Album into g
select new{ Album = g.Key, Quantity = g.Sum(x=>x.Quantity) }


"";
		this.ForEntityNames.Add(""Orders"");
		this.AddMapDefinition(docs => from order in docs
			where order[""@metadata""][""Raven-Entity-Name""] == ""Orders""
			from line in order.Lines
			select new { line.Album, line.Quantity, __document_id = order.__document_id });
		this.ReduceDefinition = results => from result in results
			group result by result.Album into g
			select new { Album = g.Key, Quantity = g.Sum((Func<dynamic, decimal>)(x => (decimal)(x.Quantity))) };
		this.GroupByExtraction = result => result.Album;
		this.AddField(""Album"");
		this.AddField(""Quantity"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Lines,Album"");
		this.AddQueryParameterForMap(""Lines,Quantity"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Lines,Album"");
		this.AddQueryParameterForReduce(""Lines,Quantity"");
	}
}

Compiled to:
using Raven.Abstractions;
using Raven.Database.Linq;
using System.Linq;
using System.Collections.Generic;
using System.Collections;
using System;
using Raven.Database.Linq.PrivateExtensions;
using Lucene.Net.Documents;
using Raven.Database.Indexing;
public class Index_SoldAlbums : AbstractViewGenerator
{
	public Index_SoldAlbums()
	{
		this.ViewText = @""from order in docs.Orders
from line in order.Lines
select new{ line.Album, line.Quantity }

from result in results
group result by result.Album into g
select new{ Album = g.Key, Quantity = g.Sum(x=>x.Quantity) }


"";
		this.ForEntityNames.Add(""Orders"");
		this.AddMapDefinition(docs => from order in docs
			where order[""@metadata""][""Raven-Entity-Name""] == ""Orders""
			from line in order.Lines
			select new { line.Album, line.Quantity, __document_id = order.__document_id });
		this.ReduceDefinition = results => from result in results
			group result by result.Album into g
			select new { Album = g.Key, Quantity = g.Sum((Func<dynamic, decimal>)(x => (decimal)(x.Quantity))) };
		this.GroupByExtraction = result => result.Album;
		this.AddField(""Album"");
		this.AddField(""Quantity"");
		this.AddQueryParameterForMap(""__document_id"");
		this.AddQueryParameterForMap(""Lines,Album"");
		this.AddQueryParameterForMap(""Lines,Quantity"");
		this.AddQueryParameterForReduce(""__document_id"");
		this.AddQueryParameterForReduce(""Lines,Album"");
		this.AddQueryParameterForReduce(""Lines,Quantity"");
	}
}
",
2012-03-30 17:21:27.5431,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index AlbumsByCountSold,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for AlbumsByCountSold,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index AlbumsByGenre,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for AlbumsByGenre,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index Artists,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Artists,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index Raven/DocumentsByEntityName,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for Raven/DocumentsByEntityName,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.IndexStorage.Startup,Debug,Loading saved index SoldAlbums,
2012-03-30 17:21:27.5431,Raven.Database.Indexing.Index.Indexing,Debug,Creating index for SoldAlbums,
2012-03-30 17:21:27.5541,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Backup/Status' was not found,
2012-03-30 17:21:27.5541,Raven.Database.Indexing.IndexStorage,Info,Ignoring delete for non existing index Temp/Comment/ByArticleUriAndPublishedDateSortByPublishedDate,
2012-03-30 17:21:27.5541,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'Raven/Replication/Destinations' was not found,
2012-03-30 17:21:27.5541,Raven.Database.Server.HttpServer,Debug,Request #  31: GET     -   691 ms - MyBlog     - 404 - /docs/Raven/Replication/Destinations,
2012-03-30 17:21:27.5541,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: ReducingExecuter, will wait for additional work",
2012-03-30 17:21:27.5541,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: IndexingExecuter, will wait for additional work",
2012-03-30 17:21:29.7611,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/temp.ico' was not found,
2012-03-30 17:21:29.7611,Raven.Database.Server.HttpServer,Debug,Request #  32: GET     -     0 ms - MyBlog     - 404 - /docs/article/temp.ico,
2012-03-30 17:21:30.0951,Raven.Database.Indexing.Index.Querying,Debug,Issuing query on index Raven/DocumentsByEntityName for: Tag:Article,
2012-03-30 17:21:30.0951,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/my-first-article' was found,
2012-03-30 17:21:30.0951,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/another-one-of-my-articles' was found,
2012-03-30 17:21:30.0951,Raven.Database.Server.HttpServer,Debug,Request #  33: GET     -     5 ms - MyBlog     - 200 - /indexes/dynamic/Article?query=&start=0&pageSize=10&aggregation=None,
2012-03-30 17:21:30.6211,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,"Inserted a new document with key 'article/my-first-article', update: True, ",
2012-03-30 17:21:30.6231,Raven.Database.DocumentDatabase,Debug,Put document article/my-first-article with etag 00000000-0000-0300-0000-000000000001,
2012-03-30 17:21:30.6231,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,"Inserted a new document with key 'article/another-one-of-my-articles', update: True, ",
2012-03-30 17:21:30.6231,Raven.Database.DocumentDatabase,Debug,Put document article/another-one-of-my-articles with etag 00000000-0000-0300-0000-000000000002,
2012-03-30 17:21:30.6231,Raven.Database.Indexing.WorkContext,Debug,"Incremented work counter to 1 because: PUT article/my-first-article, PUT article/another-one-of-my-articles",
2012-03-30 17:21:30.6231,Raven.Database.DocumentDatabase,Debug,Successfully executed 2 commands in 00:00:00.0468662,
2012-03-30 17:21:30.6231,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 1, for: ReducingExecuter, will wait for additional work",
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,Found a total of 2 documents that requires indexing since etag: 00000000-0000-0100-0000-00000000020b,
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"After read triggers executed, 2 documents remained",
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"All documents have been filtered for AlbumsByCountSold, no indexing will be performed, updating to 00000000-0000-0300-0000-000000000002, 3/30/2012 11:21:30 PM",
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"Going to index 2 documents in IndexName: Raven/DocumentsByEntityName, LastIndexedEtag: 00000000-0000-0100-0000-00000000020b",
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"All documents have been filtered for SoldAlbums, no indexing will be performed, updating to 00000000-0000-0300-0000-000000000002, 3/30/2012 11:21:30 PM",
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"All documents have been filtered for AlbumsByGenre, no indexing will be performed, updating to 00000000-0000-0300-0000-000000000002, 3/30/2012 11:21:30 PM",
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"All documents have been filtered for Artists, no indexing will be performed, updating to 00000000-0000-0300-0000-000000000002, 3/30/2012 11:21:30 PM",
2012-03-30 17:21:30.6231,Raven.Database.Indexing.AbstractIndexingExecuter,Debug,"Indexing 2 documents for index: Raven/DocumentsByEntityName. (article/my-first-article,article/another-one-of-my-articles)",
2012-03-30 17:21:30.6231,Raven.Database.Server.HttpServer,Debug,Request #  34: POST    -    75 ms - MyBlog     - 200 - /bulk_docs,
2012-03-30 17:21:30.6231,Raven.Database.Server.HttpServer,Debug,"	PUT article/my-first-article
	PUT article/another-one-of-my-articles
",
2012-03-30 17:21:30.6621,Raven.Database.Indexing.Index.Indexing,Debug,"Indexing on article/my-first-article result in index Raven/DocumentsByEntityName gave document: 	__document_id IS: article/my-first-article
	Tag I-: Article
	LastModified I-: 20120330232130620
",
2012-03-30 17:21:30.6621,Raven.Database.Indexing.Index.Indexing,Debug,"Indexing on article/another-one-of-my-articles result in index Raven/DocumentsByEntityName gave document: 	__document_id IS: article/another-one-of-my-articles
	Tag I-: Article
	LastModified I-: 20120330232130624
",
2012-03-30 17:21:30.6881,Raven.Database.Indexing.Index.Indexing,Debug,Indexed 2 documents for Raven/DocumentsByEntityName,
2012-03-30 17:21:30.6881,Raven.Database.Indexing.WorkContext,Debug,Incremented work counter to 2 because: WORK BY IndexingExecuter,
2012-03-30 17:21:30.6881,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 2, for: ReducingExecuter, will wait for additional work",
2012-03-30 17:21:30.7031,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 2, for: IndexingExecuter, will wait for additional work",
2012-03-30 17:21:33.3891,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/my-first-article' was found,
2012-03-30 17:21:33.3891,Raven.Database.Server.HttpServer,Debug,Request #  35: GET     -     0 ms - MyBlog     - 200 - /docs/article/my-first-article,
2012-03-30 17:21:50.8451,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/favicon.ico' was not found,
2012-03-30 17:21:50.8451,Raven.Database.Server.HttpServer,Debug,Request #  36: GET     -     0 ms - MyBlog     - 404 - /docs/article/favicon.ico,
2012-03-30 17:22:57.4281,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/my-first-article' was found,
2012-03-30 17:22:57.4281,Raven.Database.Server.HttpServer,Debug,Request #  37: GET     -     1 ms - MyBlog     - 304 - /docs/article/my-first-article,
2012-03-30 17:23:02.0291,Raven.Storage.Esent.StorageActions.DocumentStorageActions,Debug,Document with key 'article/favicon.ico' was not found,
2012-03-30 17:23:02.0291,Raven.Database.Server.HttpServer,Debug,Request #  38: GET     -     0 ms - MyBlog     - 404 - /docs/article/favicon.ico,
2012-03-30 17:38:36.1956,Raven.Database.Indexing.WorkContext,Debug,Stopping background workers,
2012-03-30 17:57:34.0393,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: ReducingExecuter, will wait for additional work",
2012-03-30 17:57:34.0393,Raven.Database.Indexing.WorkContext,Debug,"No work was found, workerWorkCounter: 0, for: IndexingExecuter, will wait for additional work",
2012-03-30 18:07:38.4061,Raven.Database.Indexing.WorkContext,Debug,Stopping background workers,
